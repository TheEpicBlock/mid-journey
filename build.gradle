import nl.theepicblock.mid.journey.build.CargoBuild
import nl.theepicblock.mid.journey.build.FetchWikipedia
import nl.theepicblock.mid.journey.build.ParseWikipedia
import nl.theepicblock.mid.journey.build.RunCli
import nl.theepicblock.mid.journey.build.RunTrainer
import nl.theepicblock.mid.journey.build.Uncomment

plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id "com.dorongold.task-tree" version "2.1.1"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
}

//////////////////////////////////
// Start of custom build script //
//////////////////////////////////

tasks.register("fetch_A_F", FetchWikipedia) {
	revision = "1224761126"
	output = layout.buildDirectory.file('trainingData/source/A-F.wikitext')
}
tasks.register("fetch_G_M", FetchWikipedia) {
	revision = "1218789529"
	output = layout.buildDirectory.file('trainingData/source/G-M.wikitext')
}
tasks.register("fetch_N_Z", FetchWikipedia) {
	revision = "1214503723"
	output = layout.buildDirectory.file('trainingData/source/N-Z.wikitext')
}

tasks.register("parse_trainingdata", ParseWikipedia) {
	input.add(tasks.named("fetch_A_F").get().output)
	input.add(tasks.named("fetch_G_M").get().output)
	input.add(tasks.named("fetch_N_Z").get().output)
	output = layout.buildDirectory.file("trainingData/data.json")
}

tasks.register("nn_config", Uncomment) {
	input = layout.projectDirectory.file("nn_config.jsonc")
	output = layout.buildDirectory.file("trainingData/nn_config.json")
}

tasks.register("build_trainer", CargoBuild) {
	crateRoot = layout.projectDirectory.dir("trainer")
	output = layout.buildDirectory.dir("cargo/trainer")
}

tasks.register("build_cli", CargoBuild) {
	crateRoot = layout.projectDirectory.dir("nn_cli")
	output = layout.buildDirectory.dir("cargo/cli")
}

tasks.register("train_network", RunTrainer) {
	binary = tasks.named("build_trainer").get().output
	config = tasks.named("nn_config").get().output
	trainingData = tasks.named("parse_trainingdata").get().output
	output = layout.buildDirectory.file("network_parameters.json");
}

tasks.register("run_network_cli", RunCli) {
	binary = tasks.named("build_cli").get().output
	config = tasks.named("nn_config").get().output
	network = tasks.named("train_network").get().output
	output = layout.buildDirectory.dir("cli");
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}

	// Includes the neural network inside of the jar
	from(tasks.named("train_network").get().output)
}

////////////////////////////////
// End of custom build script //
////////////////////////////////

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}